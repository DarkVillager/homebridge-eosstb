"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var transformSetCookie = function (setCookie) {
    return setCookie
        .split(",")
        .filter(function (val, i) {
        return !/\d\d:\d\d:\d\d GMT/.test(val);
    })
        .map(function (cookie) { return cookie.split(";")[0].trim(); })
        .join("; ");
};
var fetchCookieJar = function (cookieString) {
    var cookies = {};
    var addCookies = function (cookieString, setCookie) {
        if (setCookie === void 0) { setCookie = false; }
        if (setCookie)
            cookieString = transformSetCookie(cookieString);
        var newCookies = cookieString.split(";").reduce(function (accum, cookie) {
            var _a = __read(cookie.trim().split("=")), name = _a[0], value = _a.slice(1);
            accum[name] = value.join("=");
            return accum;
        }, {});
        cookies = __assign(__assign({}, cookies), newCookies);
        return cookies;
    };
    var makeCookies = function () {
        return Object.keys(cookies)
            .reduce(function (accum, key) {
            accum += key + "=" + cookies[key] + "; ";
            return accum;
        }, "")
            .trim()
            .slice(0, -1);
    };
    var getCookieValue = function (name) {
        return cookies[name];
    };
    if (cookieString)
        addCookies(cookieString);
    return { addCookies: addCookies, getCookies: makeCookies, getCookieValue: getCookieValue };
};
exports.default = fetchCookieJar;
