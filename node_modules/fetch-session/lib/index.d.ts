import { Headers, RequestInfo, RequestInit } from "node-fetch";
import httpsProxyAgent from "https-proxy-agent";
import { CookieJarReturn } from "./cookieJar";
declare type Proxy = string | httpsProxyAgent.HttpsProxyAgentOptions;
declare type FetchRequestOptions = RequestInit & {
    rejectOnFailure?: boolean;
    returnError?: boolean;
    excludeCookies?: boolean;
    proxy?: Proxy;
    parse?: "json" | "text" | "buffer" | "blob" | "arrayBuffer";
    raw?: boolean;
};
declare type FetchFn = <T>(url: RequestInfo, options?: FetchRequestOptions) => Promise<{
    headers: Headers;
    body: T;
} | null>;
export interface SessionReturn {
    cookieJar: CookieJarReturn;
    fetch: FetchFn;
}
interface SessionOptions {
    initialCookie?: string;
    verbose?: boolean;
    headers?: Record<string, string>;
    proxy?: Proxy;
}
declare const fetchSession: (options?: SessionOptions) => SessionReturn;
export default fetchSession;
